
GHADAB2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000c78  00000d0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007c  00800104  00800104  00000d10  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00000d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  000028dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001b8  00000000  00000000  00002e60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000116f  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f6  00000000  00000000  00004187  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a4  00000000  00000000  0000467d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00005024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036f  00000000  00000000  000052c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a4e  00000000  00000000  00005637  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 38       	cpi	r26, 0x80	; 128
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a2 01 	call	0x344	; 0x344 <main>
  9e:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initFunction>:
struct motors  MappedActions[9];

void initFunction(){
	for (int i=0;i<3;i++)
	{
		MappedActions[i].Servo1=0; MappedActions[i].Servo2=i*90;
  a6:	10 92 6c 01 	sts	0x016C, r1
  aa:	10 92 6d 01 	sts	0x016D, r1
  ae:	10 92 6e 01 	sts	0x016E, r1
  b2:	9a e5       	ldi	r25, 0x5A	; 90
  b4:	90 93 6f 01 	sts	0x016F, r25
  b8:	10 92 70 01 	sts	0x0170, r1
  bc:	84 eb       	ldi	r24, 0xB4	; 180
  be:	80 93 71 01 	sts	0x0171, r24
	}
	for (int i=3;i<6;i++)
	{
		MappedActions[i].Servo1=90; MappedActions[i].Servo2=(i-3)*90;
  c2:	90 93 72 01 	sts	0x0172, r25
  c6:	10 92 73 01 	sts	0x0173, r1
  ca:	90 93 74 01 	sts	0x0174, r25
  ce:	90 93 75 01 	sts	0x0175, r25
  d2:	90 93 76 01 	sts	0x0176, r25
  d6:	80 93 77 01 	sts	0x0177, r24
	}
	for (int i=6;i<9;i++)
	{
		MappedActions[i].Servo1=180; MappedActions[i].Servo2=(i-6)*90;
  da:	80 93 78 01 	sts	0x0178, r24
  de:	10 92 79 01 	sts	0x0179, r1
  e2:	80 93 7a 01 	sts	0x017A, r24
  e6:	90 93 7b 01 	sts	0x017B, r25
  ea:	80 93 7c 01 	sts	0x017C, r24
  ee:	80 93 7d 01 	sts	0x017D, r24
	}
}
  f2:	08 95       	ret

000000f4 <random_e>:
float random_e(){
	//srand(time(NULL));
	float r = (float) (rand() / RAND_MAX);
  f4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <rand>
  f8:	6f ef       	ldi	r22, 0xFF	; 255
  fa:	7f e7       	ldi	r23, 0x7F	; 127
  fc:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__divmodhi4>
 100:	88 27       	eor	r24, r24
 102:	77 fd       	sbrc	r23, 7
 104:	80 95       	com	r24
 106:	98 2f       	mov	r25, r24
 108:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__floatsisf>
	return r;
}
 10c:	46 2f       	mov	r20, r22
 10e:	57 2f       	mov	r21, r23
 110:	68 2f       	mov	r22, r24
 112:	79 2f       	mov	r23, r25
 114:	cb 01       	movw	r24, r22
 116:	ba 01       	movw	r22, r20
 118:	08 95       	ret

0000011a <random_action>:
int random_action(int max){
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
	//srand(time(NULL));
	int r = rand() % max;
 120:	0e 94 ce 05 	call	0xb9c	; 0xb9c <rand>
 124:	be 01       	movw	r22, r28
 126:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__divmodhi4>
	return r;
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <Q_tableInit>:
struct states Q_table[NOofstates];
										//* Qtable intialization */
void Q_tableInit()
{
	for(int i=0;i<NOofstates;i++){
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
	int r = rand() % max;
	return r;
}
struct states Q_table[NOofstates];
										//* Qtable intialization */
void Q_tableInit()
 134:	4a e0       	ldi	r20, 0x0A	; 10
 136:	07 c0       	rjmp	.+14     	; 0x146 <Q_tableInit+0x16>
{
	for(int i=0;i<NOofstates;i++){
		for (u8 j=0;j<NOofActions;j++)
		{
			Q_table[i].actions[j].value=0;
 138:	11 92       	st	Z+, r1
 13a:	21 50       	subi	r18, 0x01	; 1
struct states Q_table[NOofstates];
										//* Qtable intialization */
void Q_tableInit()
{
	for(int i=0;i<NOofstates;i++){
		for (u8 j=0;j<NOofActions;j++)
 13c:	e9 f7       	brne	.-6      	; 0x138 <Q_tableInit+0x8>
}
struct states Q_table[NOofstates];
										//* Qtable intialization */
void Q_tableInit()
{
	for(int i=0;i<NOofstates;i++){
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	8a 30       	cpi	r24, 0x0A	; 10
 142:	91 05       	cpc	r25, r1
 144:	81 f0       	breq	.+32     	; 0x166 <Q_tableInit+0x36>
	int r = rand() % max;
	return r;
}
struct states Q_table[NOofstates];
										//* Qtable intialization */
void Q_tableInit()
 146:	fc 01       	movw	r30, r24
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	9c 01       	movw	r18, r24
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	22 0f       	add	r18, r18
 154:	33 1f       	adc	r19, r19
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	e2 0f       	add	r30, r18
 15c:	f3 1f       	adc	r31, r19
 15e:	e8 5f       	subi	r30, 0xF8	; 248
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	24 2f       	mov	r18, r20
 164:	e9 cf       	rjmp	.-46     	; 0x138 <Q_tableInit+0x8>
 166:	08 95       	ret

00000168 <get_max>:
			Q_table[i].actions[j].value=0;
		}
	}
}

s8 get_max(u8 currentState)
 168:	e8 2f       	mov	r30, r24
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	9f 01       	movw	r18, r30
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	f9 01       	movw	r30, r18
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	e2 0f       	add	r30, r18
 17e:	f3 1f       	adc	r31, r19
 180:	e8 5f       	subi	r30, 0xF8	; 248
 182:	fe 4f       	sbci	r31, 0xFE	; 254
 184:	68 2f       	mov	r22, r24
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	cb 01       	movw	r24, r22
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	bc 01       	movw	r22, r24
 190:	66 0f       	add	r22, r22
 192:	77 1f       	adc	r23, r23
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	68 0f       	add	r22, r24
 19a:	79 1f       	adc	r23, r25
 19c:	6e 5e       	subi	r22, 0xEE	; 238
 19e:	7e 4f       	sbci	r23, 0xFE	; 254
{
	s8 max = -100;
 1a0:	8c e9       	ldi	r24, 0x9C	; 156
	for(u8 i=0;i<NOofActions;i++){
		if (max<Q_table[currentState].actions[i].value){
 1a2:	91 91       	ld	r25, Z+
 1a4:	48 2f       	mov	r20, r24
 1a6:	55 27       	eor	r21, r21
 1a8:	47 fd       	sbrc	r20, 7
 1aa:	50 95       	com	r21
 1ac:	29 2f       	mov	r18, r25
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	42 17       	cp	r20, r18
 1b2:	53 07       	cpc	r21, r19
 1b4:	0c f4       	brge	.+2      	; 0x1b8 <get_max+0x50>
			max= Q_table[currentState].actions[i].value;
 1b6:	89 2f       	mov	r24, r25
}

s8 get_max(u8 currentState)
{
	s8 max = -100;
	for(u8 i=0;i<NOofActions;i++){
 1b8:	e6 17       	cp	r30, r22
 1ba:	f7 07       	cpc	r31, r23
 1bc:	91 f7       	brne	.-28     	; 0x1a2 <get_max+0x3a>
		if (max<Q_table[currentState].actions[i].value){
			max= Q_table[currentState].actions[i].value;
		}
	}
	return max;
}
 1be:	08 95       	ret

000001c0 <greedy>:
/*greedy function that returns next state*/ 
u8 greedy(u8 currentState)
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	d8 2f       	mov	r29, r24
	u8 optimalAction;
    int eps=random_action(10);
 1c6:	8a e0       	ldi	r24, 0x0A	; 10
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 8d 00 	call	0x11a	; 0x11a <random_action>
    if(eps < epsilon)
 1ce:	8a 30       	cpi	r24, 0x0A	; 10
 1d0:	91 05       	cpc	r25, r1
 1d2:	04 f5       	brge	.+64     	; 0x214 <greedy+0x54>
		}
	}
	return max;
}
/*greedy function that returns next state*/ 
u8 greedy(u8 currentState)
 1d4:	ed 2f       	mov	r30, r29
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	cf 01       	movw	r24, r30
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	fc 01       	movw	r30, r24
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	e8 0f       	add	r30, r24
 1ea:	f9 1f       	adc	r31, r25
 1ec:	e8 5f       	subi	r30, 0xF8	; 248
 1ee:	fe 4f       	sbci	r31, 0xFE	; 254
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	6c e9       	ldi	r22, 0x9C	; 156
        Q_table[s1_state][s2_state].actions[1][1].value=-9;
        Q_table[s1_state][s2_state].actions[2][2].value=-1;
        Q_table[s1_state][s2_state].actions[2][6].value=-10;*/
    s8 max = -100;
		for(u8 i=0;i<NOofActions;i++){
			if (max<Q_table[currentState].actions[i].value){
 1f4:	51 91       	ld	r21, Z+
 1f6:	26 2f       	mov	r18, r22
 1f8:	33 27       	eor	r19, r19
 1fa:	27 fd       	sbrc	r18, 7
 1fc:	30 95       	com	r19
 1fe:	85 2f       	mov	r24, r21
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	28 17       	cp	r18, r24
 204:	39 07       	cpc	r19, r25
 206:	14 f4       	brge	.+4      	; 0x20c <greedy+0x4c>
				max= Q_table[currentState].actions[i].value;
 208:	65 2f       	mov	r22, r21
 20a:	c4 2f       	mov	r28, r20
        Q_table[s1_state][s2_state].actions[0][4].value=-6;
        Q_table[s1_state][s2_state].actions[1][1].value=-9;
        Q_table[s1_state][s2_state].actions[2][2].value=-1;
        Q_table[s1_state][s2_state].actions[2][6].value=-10;*/
    s8 max = -100;
		for(u8 i=0;i<NOofActions;i++){
 20c:	4f 5f       	subi	r20, 0xFF	; 255
 20e:	4a 30       	cpi	r20, 0x0A	; 10
 210:	89 f7       	brne	.-30     	; 0x1f4 <greedy+0x34>
 212:	05 c0       	rjmp	.+10     	; 0x21e <greedy+0x5e>
				optimalAction= i;
			}
		}
    }
    else{
        optimalAction=random_action(NOofActions);
 214:	8a e0       	ldi	r24, 0x0A	; 10
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 8d 00 	call	0x11a	; 0x11a <random_action>
 21c:	c8 2f       	mov	r28, r24
    }
	return optimalAction;
}
 21e:	8c 2f       	mov	r24, r28
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <update_Qtable>:

/*update qtable using the by the reward*/ 

void update_Qtable(u8 currentState,u8 currentAction){//has error
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	c8 2f       	mov	r28, r24
 22e:	d6 2f       	mov	r29, r22
	/*TD(S,A)= reward + gama.maxQ(st+1,A)-Q(st,At) */
	s8 reward=(currentcounter-oldcounter)/2;
 230:	80 91 06 01 	lds	r24, 0x0106
 234:	20 91 7f 01 	lds	r18, 0x017F
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	82 1b       	sub	r24, r18
 23c:	91 09       	sbc	r25, r1
 23e:	99 23       	and	r25, r25
 240:	0c f4       	brge	.+2      	; 0x244 <update_Qtable+0x1e>
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	95 95       	asr	r25
 246:	87 95       	ror	r24
 248:	18 2f       	mov	r17, r24
	if(reward==0) reward=-5;
 24a:	88 23       	and	r24, r24
 24c:	09 f4       	brne	.+2      	; 0x250 <update_Qtable+0x2a>
 24e:	1b ef       	ldi	r17, 0xFB	; 251
	s8 TD, oldQval;
    s8 max = get_max(currentState);
 250:	8c 2f       	mov	r24, r28
 252:	0e 94 b4 00 	call	0x168	; 0x168 <get_max>
	oldQval= Q_table[currentState].actions[currentAction].value;
 256:	6d 2f       	mov	r22, r29
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	a8 e0       	ldi	r26, 0x08	; 8
 25c:	b1 e0       	ldi	r27, 0x01	; 1
 25e:	2c 2f       	mov	r18, r28
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	a9 01       	movw	r20, r18
 268:	44 0f       	add	r20, r20
 26a:	55 1f       	adc	r21, r21
 26c:	44 0f       	add	r20, r20
 26e:	55 1f       	adc	r21, r21
 270:	f9 01       	movw	r30, r18
 272:	e4 0f       	add	r30, r20
 274:	f5 1f       	adc	r31, r21
 276:	e6 0f       	add	r30, r22
 278:	f7 1f       	adc	r31, r23
 27a:	ea 0f       	add	r30, r26
 27c:	fb 1f       	adc	r31, r27
 27e:	90 81       	ld	r25, Z
	TD = reward+(gama*max)-oldQval;
	Q_table[currentState].actions[currentAction].value= oldQval+alpha*TD ;
 280:	2c 2f       	mov	r18, r28
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	22 0f       	add	r18, r18
 286:	33 1f       	adc	r19, r19
 288:	a9 01       	movw	r20, r18
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	24 0f       	add	r18, r20
 294:	35 1f       	adc	r19, r21
 296:	26 0f       	add	r18, r22
 298:	37 1f       	adc	r19, r23
 29a:	a2 0f       	add	r26, r18
 29c:	b3 1f       	adc	r27, r19
	s8 reward=(currentcounter-oldcounter)/2;
	if(reward==0) reward=-5;
	s8 TD, oldQval;
    s8 max = get_max(currentState);
	oldQval= Q_table[currentState].actions[currentAction].value;
	TD = reward+(gama*max)-oldQval;
 29e:	19 1b       	sub	r17, r25
 2a0:	88 0f       	add	r24, r24
 2a2:	18 0f       	add	r17, r24
	Q_table[currentState].actions[currentAction].value= oldQval+alpha*TD ;
 2a4:	11 0f       	add	r17, r17
 2a6:	91 0f       	add	r25, r17
 2a8:	9c 93       	st	X, r25
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	08 95       	ret

000002b2 <learning>:



void learning()
{
 2b2:	cf 92       	push	r12
 2b4:	df 92       	push	r13
 2b6:	ff 92       	push	r15
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
	Q_tableInit();
 2c0:	0e 94 98 00 	call	0x130	; 0x130 <Q_tableInit>
	initFunction();
 2c4:	0e 94 53 00 	call	0xa6	; 0xa6 <initFunction>
	int episodes = 1000;
	u8 any= random_action(8);
 2c8:	88 e0       	ldi	r24, 0x08	; 8
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 8d 00 	call	0x11a	; 0x11a <random_action>
 2d0:	d8 2f       	mov	r29, r24
	u8 servo1_init=MappedActions[any].Servo1;
 2d2:	e8 2f       	mov	r30, r24
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
	u8 servo2_init=MappedActions[any].Servo2;
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	e4 59       	subi	r30, 0x94	; 148
 2dc:	fe 4f       	sbci	r31, 0xFE	; 254
 2de:	c1 81       	ldd	r28, Z+1	; 0x01
	servo1(servo1_init);
 2e0:	80 81       	ld	r24, Z
 2e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <servo1>
	servo2(servo2_init);
 2e6:	8c 2f       	mov	r24, r28
 2e8:	0e 94 b8 03 	call	0x770	; 0x770 <servo2>
 2ec:	08 ee       	ldi	r16, 0xE8	; 232
 2ee:	13 e0       	ldi	r17, 0x03	; 3
	while(episodes > 0)	
	{
		u8 opti;
		opti = greedy(any);
		u8 s1_action = MappedActions[opti].Servo1;
		u8 s2_action = MappedActions[opti].Servo2;
 2f0:	0f 2e       	mov	r0, r31
 2f2:	fc e6       	ldi	r31, 0x6C	; 108
 2f4:	cf 2e       	mov	r12, r31
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	df 2e       	mov	r13, r31
 2fa:	f0 2d       	mov	r31, r0
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <learning+0x4e>
		servo1(opti);
		servo2(s2_action);
		update_Qtable(any, opti);
		any = opti;
 2fe:	dc 2f       	mov	r29, r28
	servo1(servo1_init);
	servo2(servo2_init);
	while(episodes > 0)	
	{
		u8 opti;
		opti = greedy(any);
 300:	8d 2f       	mov	r24, r29
 302:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <greedy>
 306:	c8 2f       	mov	r28, r24
		u8 s1_action = MappedActions[opti].Servo1;
		u8 s2_action = MappedActions[opti].Servo2;
 308:	e8 2f       	mov	r30, r24
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	ee 0f       	add	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	ec 0d       	add	r30, r12
 312:	fd 1d       	adc	r31, r13
 314:	f1 80       	ldd	r15, Z+1	; 0x01
		servo1(opti);
 316:	0e 94 71 03 	call	0x6e2	; 0x6e2 <servo1>
		servo2(s2_action);
 31a:	8f 2d       	mov	r24, r15
 31c:	0e 94 b8 03 	call	0x770	; 0x770 <servo2>
		update_Qtable(any, opti);
 320:	8d 2f       	mov	r24, r29
 322:	6c 2f       	mov	r22, r28
 324:	0e 94 13 01 	call	0x226	; 0x226 <update_Qtable>
		any = opti;
		servo1(1);
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <servo1>
 32e:	01 50       	subi	r16, 0x01	; 1
 330:	10 40       	sbci	r17, 0x00	; 0
	u8 any= random_action(8);
	u8 servo1_init=MappedActions[any].Servo1;
	u8 servo2_init=MappedActions[any].Servo2;
	servo1(servo1_init);
	servo2(servo2_init);
	while(episodes > 0)	
 332:	29 f7       	brne	.-54     	; 0x2fe <learning+0x4c>
		any = opti;
		servo1(1);
		episodes--;
	
	}
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	df 90       	pop	r13
 340:	cf 90       	pop	r12
 342:	08 95       	ret

00000344 <main>:
int main (void)
{
	dec();
 344:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <dec>
	learning();
 348:	0e 94 59 01 	call	0x2b2	; 0x2b2 <learning>
 34c:	ff cf       	rjmp	.-2      	; 0x34c <main+0x8>

0000034e <__vector_1>:
}



ISR(INT0_vect)
{
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	2f 93       	push	r18
 35a:	3f 93       	push	r19
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
	currentStateCLK = PIND &(1<<PIND2);
 360:	89 b1       	in	r24, 0x09	; 9
 362:	84 70       	andi	r24, 0x04	; 4
 364:	80 93 05 01 	sts	0x0105, r24
	oldcounter = counter;
 368:	90 91 04 01 	lds	r25, 0x0104
 36c:	90 93 7f 01 	sts	0x017F, r25

	if (currentStateCLK != lastStateCLK  && currentStateCLK == 0){
 370:	90 91 7e 01 	lds	r25, 0x017E
 374:	89 17       	cp	r24, r25
 376:	f9 f0       	breq	.+62     	; 0x3b6 <__vector_1+0x68>
 378:	88 23       	and	r24, r24
 37a:	e9 f4       	brne	.+58     	; 0x3b6 <__vector_1+0x68>
		PORTC = 0X00;
 37c:	18 b8       	out	0x08, r1	; 8

		if ( (PIND & (1 << PIND3)) != currentStateCLK) {
 37e:	29 b1       	in	r18, 0x09	; 9
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	28 70       	andi	r18, 0x08	; 8
 384:	30 70       	andi	r19, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	28 17       	cp	r18, r24
 38a:	39 07       	cpc	r19, r25
 38c:	59 f0       	breq	.+22     	; 0x3a4 <__vector_1+0x56>
			counter -=2;
 38e:	80 91 04 01 	lds	r24, 0x0104
 392:	82 50       	subi	r24, 0x02	; 2
 394:	80 93 04 01 	sts	0x0104, r24
			currentDir =1;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	80 93 07 01 	sts	0x0107, r24
			PORTC |=(1<<PC0);
 39e:	40 9a       	sbi	0x08, 0	; 8
			PORTC &=~(1<<PC1);
 3a0:	41 98       	cbi	0x08, 1	; 8
 3a2:	09 c0       	rjmp	.+18     	; 0x3b6 <__vector_1+0x68>

		} else {
			// Encoder is rotating CW so increment
			counter +=2;
 3a4:	80 91 04 01 	lds	r24, 0x0104
 3a8:	8e 5f       	subi	r24, 0xFE	; 254
 3aa:	80 93 04 01 	sts	0x0104, r24
			currentDir =0;
 3ae:	10 92 07 01 	sts	0x0107, r1
			PORTC |=(1<<PC1);
 3b2:	41 9a       	sbi	0x08, 1	; 8
			PORTC &=~(1<<PC0);
 3b4:	40 98       	cbi	0x08, 0	; 8

		}
		
	}
	currentcounter = counter;
 3b6:	80 91 04 01 	lds	r24, 0x0104
 3ba:	80 93 06 01 	sts	0x0106, r24
}
 3be:	9f 91       	pop	r25
 3c0:	8f 91       	pop	r24
 3c2:	3f 91       	pop	r19
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <dec>:
u8 currentStateCLK;
extern u8 lastStateCLK;

void dec(void)
{
	DDRD &=~ (1<<2)|(1<<3);
 3d0:	52 98       	cbi	0x0a, 2	; 10
	DDRC = 0xFF;
 3d2:	8f ef       	ldi	r24, 0xFF	; 255
 3d4:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xFF;
 3d6:	88 b9       	out	0x08, r24	; 8
	EIMSK|=(1<<INT0);
 3d8:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA|=(1<<ISC00);
 3da:	e9 e6       	ldi	r30, 0x69	; 105
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	81 60       	ori	r24, 0x01	; 1
 3e2:	80 83       	st	Z, r24
	sei();
 3e4:	78 94       	sei
	lastStateCLK = PIND &(1<<PIND2);
 3e6:	89 b1       	in	r24, 0x09	; 9
 3e8:	84 70       	andi	r24, 0x04	; 4
 3ea:	80 93 7e 01 	sts	0x017E, r24
}
 3ee:	08 95       	ret

000003f0 <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
 3f0:	83 34       	cpi	r24, 0x43	; 67
 3f2:	19 f1       	breq	.+70     	; 0x43a <DIO_vsetPINDir+0x4a>
 3f4:	84 34       	cpi	r24, 0x44	; 68
 3f6:	09 f4       	brne	.+2      	; 0x3fa <DIO_vsetPINDir+0xa>
 3f8:	3d c0       	rjmp	.+122    	; 0x474 <DIO_vsetPINDir+0x84>
 3fa:	82 34       	cpi	r24, 0x42	; 66
 3fc:	09 f0       	breq	.+2      	; 0x400 <DIO_vsetPINDir+0x10>
 3fe:	56 c0       	rjmp	.+172    	; 0x4ac <DIO_vsetPINDir+0xbc>
	{
		
		case 'B':
		if(direction==1)
 400:	41 30       	cpi	r20, 0x01	; 1
 402:	69 f4       	brne	.+26     	; 0x41e <DIO_vsetPINDir+0x2e>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 404:	24 b1       	in	r18, 0x04	; 4
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	ac 01       	movw	r20, r24
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_vsetPINDir+0x22>
 40e:	44 0f       	add	r20, r20
 410:	55 1f       	adc	r21, r21
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_vsetPINDir+0x1e>
 416:	ba 01       	movw	r22, r20
 418:	62 2b       	or	r22, r18
 41a:	64 b9       	out	0x04, r22	; 4
 41c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 41e:	24 b1       	in	r18, 0x04	; 4
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	ac 01       	movw	r20, r24
 426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_vsetPINDir+0x3c>
 428:	44 0f       	add	r20, r20
 42a:	55 1f       	adc	r21, r21
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_vsetPINDir+0x38>
 430:	ba 01       	movw	r22, r20
 432:	60 95       	com	r22
 434:	62 23       	and	r22, r18
 436:	64 b9       	out	0x04, r22	; 4
 438:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 43a:	41 30       	cpi	r20, 0x01	; 1
 43c:	69 f4       	brne	.+26     	; 0x458 <DIO_vsetPINDir+0x68>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 43e:	27 b1       	in	r18, 0x07	; 7
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	ac 01       	movw	r20, r24
 446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_vsetPINDir+0x5c>
 448:	44 0f       	add	r20, r20
 44a:	55 1f       	adc	r21, r21
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <DIO_vsetPINDir+0x58>
 450:	ba 01       	movw	r22, r20
 452:	62 2b       	or	r22, r18
 454:	67 b9       	out	0x07, r22	; 7
 456:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 458:	27 b1       	in	r18, 0x07	; 7
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	ac 01       	movw	r20, r24
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_vsetPINDir+0x76>
 462:	44 0f       	add	r20, r20
 464:	55 1f       	adc	r21, r21
 466:	6a 95       	dec	r22
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_vsetPINDir+0x72>
 46a:	ba 01       	movw	r22, r20
 46c:	60 95       	com	r22
 46e:	62 23       	and	r22, r18
 470:	67 b9       	out	0x07, r22	; 7
 472:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 474:	41 30       	cpi	r20, 0x01	; 1
 476:	69 f4       	brne	.+26     	; 0x492 <DIO_vsetPINDir+0xa2>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 478:	2a b1       	in	r18, 0x0a	; 10
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	ac 01       	movw	r20, r24
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_vsetPINDir+0x96>
 482:	44 0f       	add	r20, r20
 484:	55 1f       	adc	r21, r21
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_vsetPINDir+0x92>
 48a:	ba 01       	movw	r22, r20
 48c:	62 2b       	or	r22, r18
 48e:	6a b9       	out	0x0a, r22	; 10
 490:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 492:	2a b1       	in	r18, 0x0a	; 10
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	ac 01       	movw	r20, r24
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_vsetPINDir+0xb0>
 49c:	44 0f       	add	r20, r20
 49e:	55 1f       	adc	r21, r21
 4a0:	6a 95       	dec	r22
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_vsetPINDir+0xac>
 4a4:	ba 01       	movw	r22, r20
 4a6:	60 95       	com	r22
 4a8:	62 23       	and	r22, r18
 4aa:	6a b9       	out	0x0a, r22	; 10
 4ac:	08 95       	ret

000004ae <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 4ae:	83 34       	cpi	r24, 0x43	; 67
 4b0:	19 f1       	breq	.+70     	; 0x4f8 <DIO_write+0x4a>
 4b2:	84 34       	cpi	r24, 0x44	; 68
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <DIO_write+0xa>
 4b6:	3d c0       	rjmp	.+122    	; 0x532 <DIO_write+0x84>
 4b8:	82 34       	cpi	r24, 0x42	; 66
 4ba:	09 f0       	breq	.+2      	; 0x4be <DIO_write+0x10>
 4bc:	56 c0       	rjmp	.+172    	; 0x56a <DIO_write+0xbc>
	{
		case 'B':
		
		if(outputvalue==1)
 4be:	41 30       	cpi	r20, 0x01	; 1
 4c0:	69 f4       	brne	.+26     	; 0x4dc <DIO_write+0x2e>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 4c2:	25 b1       	in	r18, 0x05	; 5
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	ac 01       	movw	r20, r24
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_write+0x22>
 4cc:	44 0f       	add	r20, r20
 4ce:	55 1f       	adc	r21, r21
 4d0:	6a 95       	dec	r22
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_write+0x1e>
 4d4:	ba 01       	movw	r22, r20
 4d6:	62 2b       	or	r22, r18
 4d8:	65 b9       	out	0x05, r22	; 5
 4da:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 4dc:	25 b1       	in	r18, 0x05	; 5
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	ac 01       	movw	r20, r24
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_write+0x3c>
 4e6:	44 0f       	add	r20, r20
 4e8:	55 1f       	adc	r21, r21
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_write+0x38>
 4ee:	ba 01       	movw	r22, r20
 4f0:	60 95       	com	r22
 4f2:	62 23       	and	r22, r18
 4f4:	65 b9       	out	0x05, r22	; 5
 4f6:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 4f8:	41 30       	cpi	r20, 0x01	; 1
 4fa:	69 f4       	brne	.+26     	; 0x516 <DIO_write+0x68>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 4fc:	28 b1       	in	r18, 0x08	; 8
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	ac 01       	movw	r20, r24
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_write+0x5c>
 506:	44 0f       	add	r20, r20
 508:	55 1f       	adc	r21, r21
 50a:	6a 95       	dec	r22
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_write+0x58>
 50e:	ba 01       	movw	r22, r20
 510:	62 2b       	or	r22, r18
 512:	68 b9       	out	0x08, r22	; 8
 514:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 516:	28 b1       	in	r18, 0x08	; 8
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	ac 01       	movw	r20, r24
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_write+0x76>
 520:	44 0f       	add	r20, r20
 522:	55 1f       	adc	r21, r21
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_write+0x72>
 528:	ba 01       	movw	r22, r20
 52a:	60 95       	com	r22
 52c:	62 23       	and	r22, r18
 52e:	68 b9       	out	0x08, r22	; 8
 530:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 532:	41 30       	cpi	r20, 0x01	; 1
 534:	69 f4       	brne	.+26     	; 0x550 <DIO_write+0xa2>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 536:	2b b1       	in	r18, 0x0b	; 11
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	ac 01       	movw	r20, r24
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_write+0x96>
 540:	44 0f       	add	r20, r20
 542:	55 1f       	adc	r21, r21
 544:	6a 95       	dec	r22
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_write+0x92>
 548:	ba 01       	movw	r22, r20
 54a:	62 2b       	or	r22, r18
 54c:	6b b9       	out	0x0b, r22	; 11
 54e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 550:	2b b1       	in	r18, 0x0b	; 11
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	ac 01       	movw	r20, r24
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_write+0xb0>
 55a:	44 0f       	add	r20, r20
 55c:	55 1f       	adc	r21, r21
 55e:	6a 95       	dec	r22
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_write+0xac>
 562:	ba 01       	movw	r22, r20
 564:	60 95       	com	r22
 566:	62 23       	and	r22, r18
 568:	6b b9       	out	0x0b, r22	; 11
 56a:	08 95       	ret

0000056c <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 56c:	83 34       	cpi	r24, 0x43	; 67
 56e:	b1 f0       	breq	.+44     	; 0x59c <DIO_u8read+0x30>
 570:	84 34       	cpi	r24, 0x44	; 68
 572:	31 f1       	breq	.+76     	; 0x5c0 <DIO_u8read+0x54>
 574:	82 34       	cpi	r24, 0x42	; 66
 576:	b9 f5       	brne	.+110    	; 0x5e6 <DIO_u8read+0x7a>
	{
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 578:	23 b1       	in	r18, 0x03	; 3
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	06 2e       	mov	r0, r22
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_u8read+0x1a>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	0a 94       	dec	r0
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_u8read+0x16>
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	82 23       	and	r24, r18
 58e:	93 23       	and	r25, r19
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_u8read+0x2a>
 592:	95 95       	asr	r25
 594:	87 95       	ror	r24
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_u8read+0x26>
		break;
 59a:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 59c:	26 b1       	in	r18, 0x06	; 6
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	06 2e       	mov	r0, r22
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_u8read+0x3e>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	0a 94       	dec	r0
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_u8read+0x3a>
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	82 23       	and	r24, r18
 5b2:	93 23       	and	r25, r19
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_u8read+0x4e>
 5b6:	95 95       	asr	r25
 5b8:	87 95       	ror	r24
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_u8read+0x4a>
		break;
 5be:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 5c0:	49 b1       	in	r20, 0x09	; 9
 5c2:	21 e0       	ldi	r18, 0x01	; 1
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	06 2e       	mov	r0, r22
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_u8read+0x62>
 5ca:	22 0f       	add	r18, r18
 5cc:	33 1f       	adc	r19, r19
 5ce:	0a 94       	dec	r0
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_u8read+0x5e>
 5d2:	50 e0       	ldi	r21, 0x00	; 0
 5d4:	24 23       	and	r18, r20
 5d6:	35 23       	and	r19, r21
 5d8:	c9 01       	movw	r24, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_u8read+0x74>
 5dc:	95 95       	asr	r25
 5de:	87 95       	ror	r24
 5e0:	6a 95       	dec	r22
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_u8read+0x70>
		break;
 5e4:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 5e6:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 5e8:	08 95       	ret

000005ea <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 5ea:	83 34       	cpi	r24, 0x43	; 67
 5ec:	89 f0       	breq	.+34     	; 0x610 <DIO_toggle+0x26>
 5ee:	84 34       	cpi	r24, 0x44	; 68
 5f0:	e1 f0       	breq	.+56     	; 0x62a <DIO_toggle+0x40>
 5f2:	82 34       	cpi	r24, 0x42	; 66
 5f4:	31 f5       	brne	.+76     	; 0x642 <DIO_toggle+0x58>
	{
		case 'B':
		toggelBit(PORTB,pinnumber);//Toggle the value of the given pin in port B
 5f6:	25 b1       	in	r18, 0x05	; 5
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	ac 01       	movw	r20, r24
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_toggle+0x1a>
 600:	44 0f       	add	r20, r20
 602:	55 1f       	adc	r21, r21
 604:	6a 95       	dec	r22
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_toggle+0x16>
 608:	ba 01       	movw	r22, r20
 60a:	62 27       	eor	r22, r18
 60c:	65 b9       	out	0x05, r22	; 5
		break;
 60e:	08 95       	ret
		case 'C':
		toggelBit(PORTC,pinnumber);//Toggle the value of the given pin in port C
 610:	28 b1       	in	r18, 0x08	; 8
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	ac 01       	movw	r20, r24
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_toggle+0x34>
 61a:	44 0f       	add	r20, r20
 61c:	55 1f       	adc	r21, r21
 61e:	6a 95       	dec	r22
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_toggle+0x30>
 622:	ba 01       	movw	r22, r20
 624:	62 27       	eor	r22, r18
 626:	68 b9       	out	0x08, r22	; 8
		break;
 628:	08 95       	ret
		case 'D':
		toggelBit(PORTD,pinnumber);//Toggle the value of the given pin in port D
 62a:	2b b1       	in	r18, 0x0b	; 11
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	ac 01       	movw	r20, r24
 632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_toggle+0x4e>
 634:	44 0f       	add	r20, r20
 636:	55 1f       	adc	r21, r21
 638:	6a 95       	dec	r22
 63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_toggle+0x4a>
 63c:	ba 01       	movw	r22, r20
 63e:	62 27       	eor	r22, r18
 640:	6b b9       	out	0x0b, r22	; 11
 642:	08 95       	ret

00000644 <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 644:	83 34       	cpi	r24, 0x43	; 67
 646:	31 f0       	breq	.+12     	; 0x654 <DIO_set_port_direction+0x10>
 648:	84 34       	cpi	r24, 0x44	; 68
 64a:	31 f0       	breq	.+12     	; 0x658 <DIO_set_port_direction+0x14>
 64c:	82 34       	cpi	r24, 0x42	; 66
 64e:	29 f4       	brne	.+10     	; 0x65a <DIO_set_port_direction+0x16>
	{
		case 'B':
		DDRB=direction; //set the direction of port B
 650:	64 b9       	out	0x04, r22	; 4
		break ;
 652:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 654:	67 b9       	out	0x07, r22	; 7
		break ;
 656:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 658:	6a b9       	out	0x0a, r22	; 10
 65a:	08 95       	ret

0000065c <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 65c:	83 34       	cpi	r24, 0x43	; 67
 65e:	31 f0       	breq	.+12     	; 0x66c <DIO_write_port+0x10>
 660:	84 34       	cpi	r24, 0x44	; 68
 662:	31 f0       	breq	.+12     	; 0x670 <DIO_write_port+0x14>
 664:	82 34       	cpi	r24, 0x42	; 66
 666:	29 f4       	brne	.+10     	; 0x672 <DIO_write_port+0x16>
	{
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 668:	65 b9       	out	0x05, r22	; 5
		break ;
 66a:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 66c:	68 b9       	out	0x08, r22	; 8
		break ;
 66e:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 670:	6b b9       	out	0x0b, r22	; 11
 672:	08 95       	ret

00000674 <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 674:	83 34       	cpi	r24, 0x43	; 67
 676:	31 f0       	breq	.+12     	; 0x684 <DIO_read_port+0x10>
 678:	84 34       	cpi	r24, 0x44	; 68
 67a:	31 f0       	breq	.+12     	; 0x688 <DIO_read_port+0x14>
 67c:	82 34       	cpi	r24, 0x42	; 66
 67e:	31 f4       	brne	.+12     	; 0x68c <DIO_read_port+0x18>
	{
		case 'B':
		return_val=PINB; // read the value of port B 
 680:	83 b1       	in	r24, 0x03	; 3
		break ;
 682:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
 684:	86 b1       	in	r24, 0x06	; 6
		break ;
 686:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
 688:	89 b1       	in	r24, 0x09	; 9
		break ;
 68a:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 68c:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
 68e:	08 95       	ret

00000690 <init>:

#include <avr/io.h>
#include "Datatypes.h"
#include "std_macros.h"
void init(double value){
	SET_BIT(DDRB,1);
 690:	21 9a       	sbi	0x04, 1	; 4
	SET_BIT(TCCR1A,COM1A1);	
 692:	e0 e8       	ldi	r30, 0x80	; 128
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	20 81       	ld	r18, Z
 698:	20 68       	ori	r18, 0x80	; 128
 69a:	20 83       	st	Z, r18
	SET_BIT(TCCR1A,WGM11);
 69c:	20 81       	ld	r18, Z
 69e:	22 60       	ori	r18, 0x02	; 2
 6a0:	20 83       	st	Z, r18
	SET_BIT(TCCR1B,WGM12);
 6a2:	e1 e8       	ldi	r30, 0x81	; 129
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	20 81       	ld	r18, Z
 6a8:	28 60       	ori	r18, 0x08	; 8
 6aa:	20 83       	st	Z, r18
	SET_BIT(TCCR1B,WGM13);
 6ac:	20 81       	ld	r18, Z
 6ae:	20 61       	ori	r18, 0x10	; 16
 6b0:	20 83       	st	Z, r18
	SET_BIT(TCCR1B,CS11);
 6b2:	20 81       	ld	r18, Z
 6b4:	22 60       	ori	r18, 0x02	; 2
 6b6:	20 83       	st	Z, r18
	
	ICR1=10000-1;
 6b8:	2f e0       	ldi	r18, 0x0F	; 15
 6ba:	37 e2       	ldi	r19, 0x27	; 39
 6bc:	30 93 87 00 	sts	0x0087, r19
 6c0:	20 93 86 00 	sts	0x0086, r18
	OCR1A=500*value;
 6c4:	20 e0       	ldi	r18, 0x00	; 0
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	4a ef       	ldi	r20, 0xFA	; 250
 6ca:	53 e4       	ldi	r21, 0x43	; 67
 6cc:	0e 94 ef 04 	call	0x9de	; 0x9de <__mulsf3>
 6d0:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 6d4:	dc 01       	movw	r26, r24
 6d6:	cb 01       	movw	r24, r22
 6d8:	90 93 89 00 	sts	0x0089, r25
 6dc:	80 93 88 00 	sts	0x0088, r24
}
 6e0:	08 95       	ret

000006e2 <servo1>:

void servo1(u8 ang)
{
	if(ang == 0)
 6e2:	88 23       	and	r24, r24
 6e4:	39 f4       	brne	.+14     	; 0x6f4 <servo1+0x12>
	init(1);
 6e6:	60 e0       	ldi	r22, 0x00	; 0
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	80 e8       	ldi	r24, 0x80	; 128
 6ec:	9f e3       	ldi	r25, 0x3F	; 63
 6ee:	0e 94 48 03 	call	0x690	; 0x690 <init>
 6f2:	08 95       	ret
	else{
			double temp =(double) ang*8/180;
 6f4:	68 2f       	mov	r22, r24
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__floatunsisf>
 700:	20 e0       	ldi	r18, 0x00	; 0
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	40 e0       	ldi	r20, 0x00	; 0
 706:	51 e4       	ldi	r21, 0x41	; 65
 708:	0e 94 ef 04 	call	0x9de	; 0x9de <__mulsf3>
 70c:	20 e0       	ldi	r18, 0x00	; 0
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	44 e3       	ldi	r20, 0x34	; 52
 712:	53 e4       	ldi	r21, 0x43	; 67
 714:	0e 94 cd 03 	call	0x79a	; 0x79a <__divsf3>
			init(temp);
 718:	0e 94 48 03 	call	0x690	; 0x690 <init>
 71c:	08 95       	ret

0000071e <init2>:

	
}

void init2 (double value){
	SET_BIT(DDRB,1);
 71e:	21 9a       	sbi	0x04, 1	; 4
	SET_BIT(TCCR1A,COM1A1);
 720:	e0 e8       	ldi	r30, 0x80	; 128
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	20 81       	ld	r18, Z
 726:	20 68       	ori	r18, 0x80	; 128
 728:	20 83       	st	Z, r18
	SET_BIT(TCCR1A,WGM11);
 72a:	20 81       	ld	r18, Z
 72c:	22 60       	ori	r18, 0x02	; 2
 72e:	20 83       	st	Z, r18
	SET_BIT(TCCR1B,WGM12);
 730:	e1 e8       	ldi	r30, 0x81	; 129
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	20 81       	ld	r18, Z
 736:	28 60       	ori	r18, 0x08	; 8
 738:	20 83       	st	Z, r18
	SET_BIT(TCCR1B,WGM13);
 73a:	20 81       	ld	r18, Z
 73c:	20 61       	ori	r18, 0x10	; 16
 73e:	20 83       	st	Z, r18
	SET_BIT(TCCR1B,CS11);
 740:	20 81       	ld	r18, Z
 742:	22 60       	ori	r18, 0x02	; 2
 744:	20 83       	st	Z, r18
	ICR1=10000-1;
 746:	2f e0       	ldi	r18, 0x0F	; 15
 748:	37 e2       	ldi	r19, 0x27	; 39
 74a:	30 93 87 00 	sts	0x0087, r19
 74e:	20 93 86 00 	sts	0x0086, r18
	OCR1B=500*value;
 752:	20 e0       	ldi	r18, 0x00	; 0
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	4a ef       	ldi	r20, 0xFA	; 250
 758:	53 e4       	ldi	r21, 0x43	; 67
 75a:	0e 94 ef 04 	call	0x9de	; 0x9de <__mulsf3>
 75e:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 762:	dc 01       	movw	r26, r24
 764:	cb 01       	movw	r24, r22
 766:	90 93 8b 00 	sts	0x008B, r25
 76a:	80 93 8a 00 	sts	0x008A, r24
}
 76e:	08 95       	ret

00000770 <servo2>:

void servo2(u8 ang)
{
	double temp =(double) ang*8/180;
 770:	68 2f       	mov	r22, r24
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__floatunsisf>
 77c:	20 e0       	ldi	r18, 0x00	; 0
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	40 e0       	ldi	r20, 0x00	; 0
 782:	51 e4       	ldi	r21, 0x41	; 65
 784:	0e 94 ef 04 	call	0x9de	; 0x9de <__mulsf3>
 788:	20 e0       	ldi	r18, 0x00	; 0
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	44 e3       	ldi	r20, 0x34	; 52
 78e:	53 e4       	ldi	r21, 0x43	; 67
 790:	0e 94 cd 03 	call	0x79a	; 0x79a <__divsf3>
	init2(temp);
 794:	0e 94 8f 03 	call	0x71e	; 0x71e <init2>
 798:	08 95       	ret

0000079a <__divsf3>:
 79a:	0c d0       	rcall	.+24     	; 0x7b4 <__divsf3x>
 79c:	e6 c0       	rjmp	.+460    	; 0x96a <__fp_round>
 79e:	de d0       	rcall	.+444    	; 0x95c <__fp_pscB>
 7a0:	40 f0       	brcs	.+16     	; 0x7b2 <__divsf3+0x18>
 7a2:	d5 d0       	rcall	.+426    	; 0x94e <__fp_pscA>
 7a4:	30 f0       	brcs	.+12     	; 0x7b2 <__divsf3+0x18>
 7a6:	21 f4       	brne	.+8      	; 0x7b0 <__divsf3+0x16>
 7a8:	5f 3f       	cpi	r21, 0xFF	; 255
 7aa:	19 f0       	breq	.+6      	; 0x7b2 <__divsf3+0x18>
 7ac:	c7 c0       	rjmp	.+398    	; 0x93c <__fp_inf>
 7ae:	51 11       	cpse	r21, r1
 7b0:	10 c1       	rjmp	.+544    	; 0x9d2 <__fp_szero>
 7b2:	ca c0       	rjmp	.+404    	; 0x948 <__fp_nan>

000007b4 <__divsf3x>:
 7b4:	eb d0       	rcall	.+470    	; 0x98c <__fp_split3>
 7b6:	98 f3       	brcs	.-26     	; 0x79e <__divsf3+0x4>

000007b8 <__divsf3_pse>:
 7b8:	99 23       	and	r25, r25
 7ba:	c9 f3       	breq	.-14     	; 0x7ae <__divsf3+0x14>
 7bc:	55 23       	and	r21, r21
 7be:	b1 f3       	breq	.-20     	; 0x7ac <__divsf3+0x12>
 7c0:	95 1b       	sub	r25, r21
 7c2:	55 0b       	sbc	r21, r21
 7c4:	bb 27       	eor	r27, r27
 7c6:	aa 27       	eor	r26, r26
 7c8:	62 17       	cp	r22, r18
 7ca:	73 07       	cpc	r23, r19
 7cc:	84 07       	cpc	r24, r20
 7ce:	38 f0       	brcs	.+14     	; 0x7de <__divsf3_pse+0x26>
 7d0:	9f 5f       	subi	r25, 0xFF	; 255
 7d2:	5f 4f       	sbci	r21, 0xFF	; 255
 7d4:	22 0f       	add	r18, r18
 7d6:	33 1f       	adc	r19, r19
 7d8:	44 1f       	adc	r20, r20
 7da:	aa 1f       	adc	r26, r26
 7dc:	a9 f3       	breq	.-22     	; 0x7c8 <__divsf3_pse+0x10>
 7de:	33 d0       	rcall	.+102    	; 0x846 <__divsf3_pse+0x8e>
 7e0:	0e 2e       	mov	r0, r30
 7e2:	3a f0       	brmi	.+14     	; 0x7f2 <__divsf3_pse+0x3a>
 7e4:	e0 e8       	ldi	r30, 0x80	; 128
 7e6:	30 d0       	rcall	.+96     	; 0x848 <__divsf3_pse+0x90>
 7e8:	91 50       	subi	r25, 0x01	; 1
 7ea:	50 40       	sbci	r21, 0x00	; 0
 7ec:	e6 95       	lsr	r30
 7ee:	00 1c       	adc	r0, r0
 7f0:	ca f7       	brpl	.-14     	; 0x7e4 <__divsf3_pse+0x2c>
 7f2:	29 d0       	rcall	.+82     	; 0x846 <__divsf3_pse+0x8e>
 7f4:	fe 2f       	mov	r31, r30
 7f6:	27 d0       	rcall	.+78     	; 0x846 <__divsf3_pse+0x8e>
 7f8:	66 0f       	add	r22, r22
 7fa:	77 1f       	adc	r23, r23
 7fc:	88 1f       	adc	r24, r24
 7fe:	bb 1f       	adc	r27, r27
 800:	26 17       	cp	r18, r22
 802:	37 07       	cpc	r19, r23
 804:	48 07       	cpc	r20, r24
 806:	ab 07       	cpc	r26, r27
 808:	b0 e8       	ldi	r27, 0x80	; 128
 80a:	09 f0       	breq	.+2      	; 0x80e <__divsf3_pse+0x56>
 80c:	bb 0b       	sbc	r27, r27
 80e:	80 2d       	mov	r24, r0
 810:	bf 01       	movw	r22, r30
 812:	ff 27       	eor	r31, r31
 814:	93 58       	subi	r25, 0x83	; 131
 816:	5f 4f       	sbci	r21, 0xFF	; 255
 818:	2a f0       	brmi	.+10     	; 0x824 <__divsf3_pse+0x6c>
 81a:	9e 3f       	cpi	r25, 0xFE	; 254
 81c:	51 05       	cpc	r21, r1
 81e:	68 f0       	brcs	.+26     	; 0x83a <__divsf3_pse+0x82>
 820:	8d c0       	rjmp	.+282    	; 0x93c <__fp_inf>
 822:	d7 c0       	rjmp	.+430    	; 0x9d2 <__fp_szero>
 824:	5f 3f       	cpi	r21, 0xFF	; 255
 826:	ec f3       	brlt	.-6      	; 0x822 <__divsf3_pse+0x6a>
 828:	98 3e       	cpi	r25, 0xE8	; 232
 82a:	dc f3       	brlt	.-10     	; 0x822 <__divsf3_pse+0x6a>
 82c:	86 95       	lsr	r24
 82e:	77 95       	ror	r23
 830:	67 95       	ror	r22
 832:	b7 95       	ror	r27
 834:	f7 95       	ror	r31
 836:	9f 5f       	subi	r25, 0xFF	; 255
 838:	c9 f7       	brne	.-14     	; 0x82c <__divsf3_pse+0x74>
 83a:	88 0f       	add	r24, r24
 83c:	91 1d       	adc	r25, r1
 83e:	96 95       	lsr	r25
 840:	87 95       	ror	r24
 842:	97 f9       	bld	r25, 7
 844:	08 95       	ret
 846:	e1 e0       	ldi	r30, 0x01	; 1
 848:	66 0f       	add	r22, r22
 84a:	77 1f       	adc	r23, r23
 84c:	88 1f       	adc	r24, r24
 84e:	bb 1f       	adc	r27, r27
 850:	62 17       	cp	r22, r18
 852:	73 07       	cpc	r23, r19
 854:	84 07       	cpc	r24, r20
 856:	ba 07       	cpc	r27, r26
 858:	20 f0       	brcs	.+8      	; 0x862 <__divsf3_pse+0xaa>
 85a:	62 1b       	sub	r22, r18
 85c:	73 0b       	sbc	r23, r19
 85e:	84 0b       	sbc	r24, r20
 860:	ba 0b       	sbc	r27, r26
 862:	ee 1f       	adc	r30, r30
 864:	88 f7       	brcc	.-30     	; 0x848 <__divsf3_pse+0x90>
 866:	e0 95       	com	r30
 868:	08 95       	ret

0000086a <__fixunssfsi>:
 86a:	98 d0       	rcall	.+304    	; 0x99c <__fp_splitA>
 86c:	88 f0       	brcs	.+34     	; 0x890 <__fixunssfsi+0x26>
 86e:	9f 57       	subi	r25, 0x7F	; 127
 870:	90 f0       	brcs	.+36     	; 0x896 <__fixunssfsi+0x2c>
 872:	b9 2f       	mov	r27, r25
 874:	99 27       	eor	r25, r25
 876:	b7 51       	subi	r27, 0x17	; 23
 878:	a0 f0       	brcs	.+40     	; 0x8a2 <__fixunssfsi+0x38>
 87a:	d1 f0       	breq	.+52     	; 0x8b0 <__fixunssfsi+0x46>
 87c:	66 0f       	add	r22, r22
 87e:	77 1f       	adc	r23, r23
 880:	88 1f       	adc	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	1a f0       	brmi	.+6      	; 0x88c <__fixunssfsi+0x22>
 886:	ba 95       	dec	r27
 888:	c9 f7       	brne	.-14     	; 0x87c <__fixunssfsi+0x12>
 88a:	12 c0       	rjmp	.+36     	; 0x8b0 <__fixunssfsi+0x46>
 88c:	b1 30       	cpi	r27, 0x01	; 1
 88e:	81 f0       	breq	.+32     	; 0x8b0 <__fixunssfsi+0x46>
 890:	9f d0       	rcall	.+318    	; 0x9d0 <__fp_zero>
 892:	b1 e0       	ldi	r27, 0x01	; 1
 894:	08 95       	ret
 896:	9c c0       	rjmp	.+312    	; 0x9d0 <__fp_zero>
 898:	67 2f       	mov	r22, r23
 89a:	78 2f       	mov	r23, r24
 89c:	88 27       	eor	r24, r24
 89e:	b8 5f       	subi	r27, 0xF8	; 248
 8a0:	39 f0       	breq	.+14     	; 0x8b0 <__fixunssfsi+0x46>
 8a2:	b9 3f       	cpi	r27, 0xF9	; 249
 8a4:	cc f3       	brlt	.-14     	; 0x898 <__fixunssfsi+0x2e>
 8a6:	86 95       	lsr	r24
 8a8:	77 95       	ror	r23
 8aa:	67 95       	ror	r22
 8ac:	b3 95       	inc	r27
 8ae:	d9 f7       	brne	.-10     	; 0x8a6 <__fixunssfsi+0x3c>
 8b0:	3e f4       	brtc	.+14     	; 0x8c0 <__fixunssfsi+0x56>
 8b2:	90 95       	com	r25
 8b4:	80 95       	com	r24
 8b6:	70 95       	com	r23
 8b8:	61 95       	neg	r22
 8ba:	7f 4f       	sbci	r23, 0xFF	; 255
 8bc:	8f 4f       	sbci	r24, 0xFF	; 255
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	08 95       	ret

000008c2 <__floatunsisf>:
 8c2:	e8 94       	clt
 8c4:	09 c0       	rjmp	.+18     	; 0x8d8 <__floatsisf+0x12>

000008c6 <__floatsisf>:
 8c6:	97 fb       	bst	r25, 7
 8c8:	3e f4       	brtc	.+14     	; 0x8d8 <__floatsisf+0x12>
 8ca:	90 95       	com	r25
 8cc:	80 95       	com	r24
 8ce:	70 95       	com	r23
 8d0:	61 95       	neg	r22
 8d2:	7f 4f       	sbci	r23, 0xFF	; 255
 8d4:	8f 4f       	sbci	r24, 0xFF	; 255
 8d6:	9f 4f       	sbci	r25, 0xFF	; 255
 8d8:	99 23       	and	r25, r25
 8da:	a9 f0       	breq	.+42     	; 0x906 <__stack+0x7>
 8dc:	f9 2f       	mov	r31, r25
 8de:	96 e9       	ldi	r25, 0x96	; 150
 8e0:	bb 27       	eor	r27, r27
 8e2:	93 95       	inc	r25
 8e4:	f6 95       	lsr	r31
 8e6:	87 95       	ror	r24
 8e8:	77 95       	ror	r23
 8ea:	67 95       	ror	r22
 8ec:	b7 95       	ror	r27
 8ee:	f1 11       	cpse	r31, r1
 8f0:	f8 cf       	rjmp	.-16     	; 0x8e2 <__floatsisf+0x1c>
 8f2:	fa f4       	brpl	.+62     	; 0x932 <__stack+0x33>
 8f4:	bb 0f       	add	r27, r27
 8f6:	11 f4       	brne	.+4      	; 0x8fc <__floatsisf+0x36>
 8f8:	60 ff       	sbrs	r22, 0
 8fa:	1b c0       	rjmp	.+54     	; 0x932 <__stack+0x33>
 8fc:	6f 5f       	subi	r22, 0xFF	; 255
 8fe:	7f 4f       	sbci	r23, 0xFF	; 255
 900:	8f 4f       	sbci	r24, 0xFF	; 255
 902:	9f 4f       	sbci	r25, 0xFF	; 255
 904:	16 c0       	rjmp	.+44     	; 0x932 <__stack+0x33>
 906:	88 23       	and	r24, r24
 908:	11 f0       	breq	.+4      	; 0x90e <__stack+0xf>
 90a:	96 e9       	ldi	r25, 0x96	; 150
 90c:	11 c0       	rjmp	.+34     	; 0x930 <__stack+0x31>
 90e:	77 23       	and	r23, r23
 910:	21 f0       	breq	.+8      	; 0x91a <__stack+0x1b>
 912:	9e e8       	ldi	r25, 0x8E	; 142
 914:	87 2f       	mov	r24, r23
 916:	76 2f       	mov	r23, r22
 918:	05 c0       	rjmp	.+10     	; 0x924 <__stack+0x25>
 91a:	66 23       	and	r22, r22
 91c:	71 f0       	breq	.+28     	; 0x93a <__stack+0x3b>
 91e:	96 e8       	ldi	r25, 0x86	; 134
 920:	86 2f       	mov	r24, r22
 922:	70 e0       	ldi	r23, 0x00	; 0
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	2a f0       	brmi	.+10     	; 0x932 <__stack+0x33>
 928:	9a 95       	dec	r25
 92a:	66 0f       	add	r22, r22
 92c:	77 1f       	adc	r23, r23
 92e:	88 1f       	adc	r24, r24
 930:	da f7       	brpl	.-10     	; 0x928 <__stack+0x29>
 932:	88 0f       	add	r24, r24
 934:	96 95       	lsr	r25
 936:	87 95       	ror	r24
 938:	97 f9       	bld	r25, 7
 93a:	08 95       	ret

0000093c <__fp_inf>:
 93c:	97 f9       	bld	r25, 7
 93e:	9f 67       	ori	r25, 0x7F	; 127
 940:	80 e8       	ldi	r24, 0x80	; 128
 942:	70 e0       	ldi	r23, 0x00	; 0
 944:	60 e0       	ldi	r22, 0x00	; 0
 946:	08 95       	ret

00000948 <__fp_nan>:
 948:	9f ef       	ldi	r25, 0xFF	; 255
 94a:	80 ec       	ldi	r24, 0xC0	; 192
 94c:	08 95       	ret

0000094e <__fp_pscA>:
 94e:	00 24       	eor	r0, r0
 950:	0a 94       	dec	r0
 952:	16 16       	cp	r1, r22
 954:	17 06       	cpc	r1, r23
 956:	18 06       	cpc	r1, r24
 958:	09 06       	cpc	r0, r25
 95a:	08 95       	ret

0000095c <__fp_pscB>:
 95c:	00 24       	eor	r0, r0
 95e:	0a 94       	dec	r0
 960:	12 16       	cp	r1, r18
 962:	13 06       	cpc	r1, r19
 964:	14 06       	cpc	r1, r20
 966:	05 06       	cpc	r0, r21
 968:	08 95       	ret

0000096a <__fp_round>:
 96a:	09 2e       	mov	r0, r25
 96c:	03 94       	inc	r0
 96e:	00 0c       	add	r0, r0
 970:	11 f4       	brne	.+4      	; 0x976 <__fp_round+0xc>
 972:	88 23       	and	r24, r24
 974:	52 f0       	brmi	.+20     	; 0x98a <__fp_round+0x20>
 976:	bb 0f       	add	r27, r27
 978:	40 f4       	brcc	.+16     	; 0x98a <__fp_round+0x20>
 97a:	bf 2b       	or	r27, r31
 97c:	11 f4       	brne	.+4      	; 0x982 <__fp_round+0x18>
 97e:	60 ff       	sbrs	r22, 0
 980:	04 c0       	rjmp	.+8      	; 0x98a <__fp_round+0x20>
 982:	6f 5f       	subi	r22, 0xFF	; 255
 984:	7f 4f       	sbci	r23, 0xFF	; 255
 986:	8f 4f       	sbci	r24, 0xFF	; 255
 988:	9f 4f       	sbci	r25, 0xFF	; 255
 98a:	08 95       	ret

0000098c <__fp_split3>:
 98c:	57 fd       	sbrc	r21, 7
 98e:	90 58       	subi	r25, 0x80	; 128
 990:	44 0f       	add	r20, r20
 992:	55 1f       	adc	r21, r21
 994:	59 f0       	breq	.+22     	; 0x9ac <__fp_splitA+0x10>
 996:	5f 3f       	cpi	r21, 0xFF	; 255
 998:	71 f0       	breq	.+28     	; 0x9b6 <__fp_splitA+0x1a>
 99a:	47 95       	ror	r20

0000099c <__fp_splitA>:
 99c:	88 0f       	add	r24, r24
 99e:	97 fb       	bst	r25, 7
 9a0:	99 1f       	adc	r25, r25
 9a2:	61 f0       	breq	.+24     	; 0x9bc <__fp_splitA+0x20>
 9a4:	9f 3f       	cpi	r25, 0xFF	; 255
 9a6:	79 f0       	breq	.+30     	; 0x9c6 <__fp_splitA+0x2a>
 9a8:	87 95       	ror	r24
 9aa:	08 95       	ret
 9ac:	12 16       	cp	r1, r18
 9ae:	13 06       	cpc	r1, r19
 9b0:	14 06       	cpc	r1, r20
 9b2:	55 1f       	adc	r21, r21
 9b4:	f2 cf       	rjmp	.-28     	; 0x99a <__fp_split3+0xe>
 9b6:	46 95       	lsr	r20
 9b8:	f1 df       	rcall	.-30     	; 0x99c <__fp_splitA>
 9ba:	08 c0       	rjmp	.+16     	; 0x9cc <__fp_splitA+0x30>
 9bc:	16 16       	cp	r1, r22
 9be:	17 06       	cpc	r1, r23
 9c0:	18 06       	cpc	r1, r24
 9c2:	99 1f       	adc	r25, r25
 9c4:	f1 cf       	rjmp	.-30     	; 0x9a8 <__fp_splitA+0xc>
 9c6:	86 95       	lsr	r24
 9c8:	71 05       	cpc	r23, r1
 9ca:	61 05       	cpc	r22, r1
 9cc:	08 94       	sec
 9ce:	08 95       	ret

000009d0 <__fp_zero>:
 9d0:	e8 94       	clt

000009d2 <__fp_szero>:
 9d2:	bb 27       	eor	r27, r27
 9d4:	66 27       	eor	r22, r22
 9d6:	77 27       	eor	r23, r23
 9d8:	cb 01       	movw	r24, r22
 9da:	97 f9       	bld	r25, 7
 9dc:	08 95       	ret

000009de <__mulsf3>:
 9de:	0b d0       	rcall	.+22     	; 0x9f6 <__mulsf3x>
 9e0:	c4 cf       	rjmp	.-120    	; 0x96a <__fp_round>
 9e2:	b5 df       	rcall	.-150    	; 0x94e <__fp_pscA>
 9e4:	28 f0       	brcs	.+10     	; 0x9f0 <__mulsf3+0x12>
 9e6:	ba df       	rcall	.-140    	; 0x95c <__fp_pscB>
 9e8:	18 f0       	brcs	.+6      	; 0x9f0 <__mulsf3+0x12>
 9ea:	95 23       	and	r25, r21
 9ec:	09 f0       	breq	.+2      	; 0x9f0 <__mulsf3+0x12>
 9ee:	a6 cf       	rjmp	.-180    	; 0x93c <__fp_inf>
 9f0:	ab cf       	rjmp	.-170    	; 0x948 <__fp_nan>
 9f2:	11 24       	eor	r1, r1
 9f4:	ee cf       	rjmp	.-36     	; 0x9d2 <__fp_szero>

000009f6 <__mulsf3x>:
 9f6:	ca df       	rcall	.-108    	; 0x98c <__fp_split3>
 9f8:	a0 f3       	brcs	.-24     	; 0x9e2 <__mulsf3+0x4>

000009fa <__mulsf3_pse>:
 9fa:	95 9f       	mul	r25, r21
 9fc:	d1 f3       	breq	.-12     	; 0x9f2 <__mulsf3+0x14>
 9fe:	95 0f       	add	r25, r21
 a00:	50 e0       	ldi	r21, 0x00	; 0
 a02:	55 1f       	adc	r21, r21
 a04:	62 9f       	mul	r22, r18
 a06:	f0 01       	movw	r30, r0
 a08:	72 9f       	mul	r23, r18
 a0a:	bb 27       	eor	r27, r27
 a0c:	f0 0d       	add	r31, r0
 a0e:	b1 1d       	adc	r27, r1
 a10:	63 9f       	mul	r22, r19
 a12:	aa 27       	eor	r26, r26
 a14:	f0 0d       	add	r31, r0
 a16:	b1 1d       	adc	r27, r1
 a18:	aa 1f       	adc	r26, r26
 a1a:	64 9f       	mul	r22, r20
 a1c:	66 27       	eor	r22, r22
 a1e:	b0 0d       	add	r27, r0
 a20:	a1 1d       	adc	r26, r1
 a22:	66 1f       	adc	r22, r22
 a24:	82 9f       	mul	r24, r18
 a26:	22 27       	eor	r18, r18
 a28:	b0 0d       	add	r27, r0
 a2a:	a1 1d       	adc	r26, r1
 a2c:	62 1f       	adc	r22, r18
 a2e:	73 9f       	mul	r23, r19
 a30:	b0 0d       	add	r27, r0
 a32:	a1 1d       	adc	r26, r1
 a34:	62 1f       	adc	r22, r18
 a36:	83 9f       	mul	r24, r19
 a38:	a0 0d       	add	r26, r0
 a3a:	61 1d       	adc	r22, r1
 a3c:	22 1f       	adc	r18, r18
 a3e:	74 9f       	mul	r23, r20
 a40:	33 27       	eor	r19, r19
 a42:	a0 0d       	add	r26, r0
 a44:	61 1d       	adc	r22, r1
 a46:	23 1f       	adc	r18, r19
 a48:	84 9f       	mul	r24, r20
 a4a:	60 0d       	add	r22, r0
 a4c:	21 1d       	adc	r18, r1
 a4e:	82 2f       	mov	r24, r18
 a50:	76 2f       	mov	r23, r22
 a52:	6a 2f       	mov	r22, r26
 a54:	11 24       	eor	r1, r1
 a56:	9f 57       	subi	r25, 0x7F	; 127
 a58:	50 40       	sbci	r21, 0x00	; 0
 a5a:	8a f0       	brmi	.+34     	; 0xa7e <__mulsf3_pse+0x84>
 a5c:	e1 f0       	breq	.+56     	; 0xa96 <__mulsf3_pse+0x9c>
 a5e:	88 23       	and	r24, r24
 a60:	4a f0       	brmi	.+18     	; 0xa74 <__mulsf3_pse+0x7a>
 a62:	ee 0f       	add	r30, r30
 a64:	ff 1f       	adc	r31, r31
 a66:	bb 1f       	adc	r27, r27
 a68:	66 1f       	adc	r22, r22
 a6a:	77 1f       	adc	r23, r23
 a6c:	88 1f       	adc	r24, r24
 a6e:	91 50       	subi	r25, 0x01	; 1
 a70:	50 40       	sbci	r21, 0x00	; 0
 a72:	a9 f7       	brne	.-22     	; 0xa5e <__mulsf3_pse+0x64>
 a74:	9e 3f       	cpi	r25, 0xFE	; 254
 a76:	51 05       	cpc	r21, r1
 a78:	70 f0       	brcs	.+28     	; 0xa96 <__mulsf3_pse+0x9c>
 a7a:	60 cf       	rjmp	.-320    	; 0x93c <__fp_inf>
 a7c:	aa cf       	rjmp	.-172    	; 0x9d2 <__fp_szero>
 a7e:	5f 3f       	cpi	r21, 0xFF	; 255
 a80:	ec f3       	brlt	.-6      	; 0xa7c <__mulsf3_pse+0x82>
 a82:	98 3e       	cpi	r25, 0xE8	; 232
 a84:	dc f3       	brlt	.-10     	; 0xa7c <__mulsf3_pse+0x82>
 a86:	86 95       	lsr	r24
 a88:	77 95       	ror	r23
 a8a:	67 95       	ror	r22
 a8c:	b7 95       	ror	r27
 a8e:	f7 95       	ror	r31
 a90:	e7 95       	ror	r30
 a92:	9f 5f       	subi	r25, 0xFF	; 255
 a94:	c1 f7       	brne	.-16     	; 0xa86 <__mulsf3_pse+0x8c>
 a96:	fe 2b       	or	r31, r30
 a98:	88 0f       	add	r24, r24
 a9a:	91 1d       	adc	r25, r1
 a9c:	96 95       	lsr	r25
 a9e:	87 95       	ror	r24
 aa0:	97 f9       	bld	r25, 7
 aa2:	08 95       	ret

00000aa4 <__divmodhi4>:
 aa4:	97 fb       	bst	r25, 7
 aa6:	09 2e       	mov	r0, r25
 aa8:	07 26       	eor	r0, r23
 aaa:	0a d0       	rcall	.+20     	; 0xac0 <__divmodhi4_neg1>
 aac:	77 fd       	sbrc	r23, 7
 aae:	04 d0       	rcall	.+8      	; 0xab8 <__divmodhi4_neg2>
 ab0:	0c d0       	rcall	.+24     	; 0xaca <__udivmodhi4>
 ab2:	06 d0       	rcall	.+12     	; 0xac0 <__divmodhi4_neg1>
 ab4:	00 20       	and	r0, r0
 ab6:	1a f4       	brpl	.+6      	; 0xabe <__divmodhi4_exit>

00000ab8 <__divmodhi4_neg2>:
 ab8:	70 95       	com	r23
 aba:	61 95       	neg	r22
 abc:	7f 4f       	sbci	r23, 0xFF	; 255

00000abe <__divmodhi4_exit>:
 abe:	08 95       	ret

00000ac0 <__divmodhi4_neg1>:
 ac0:	f6 f7       	brtc	.-4      	; 0xabe <__divmodhi4_exit>
 ac2:	90 95       	com	r25
 ac4:	81 95       	neg	r24
 ac6:	9f 4f       	sbci	r25, 0xFF	; 255
 ac8:	08 95       	ret

00000aca <__udivmodhi4>:
 aca:	aa 1b       	sub	r26, r26
 acc:	bb 1b       	sub	r27, r27
 ace:	51 e1       	ldi	r21, 0x11	; 17
 ad0:	07 c0       	rjmp	.+14     	; 0xae0 <__udivmodhi4_ep>

00000ad2 <__udivmodhi4_loop>:
 ad2:	aa 1f       	adc	r26, r26
 ad4:	bb 1f       	adc	r27, r27
 ad6:	a6 17       	cp	r26, r22
 ad8:	b7 07       	cpc	r27, r23
 ada:	10 f0       	brcs	.+4      	; 0xae0 <__udivmodhi4_ep>
 adc:	a6 1b       	sub	r26, r22
 ade:	b7 0b       	sbc	r27, r23

00000ae0 <__udivmodhi4_ep>:
 ae0:	88 1f       	adc	r24, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	5a 95       	dec	r21
 ae6:	a9 f7       	brne	.-22     	; 0xad2 <__udivmodhi4_loop>
 ae8:	80 95       	com	r24
 aea:	90 95       	com	r25
 aec:	bc 01       	movw	r22, r24
 aee:	cd 01       	movw	r24, r26
 af0:	08 95       	ret

00000af2 <do_rand>:
 af2:	8f 92       	push	r8
 af4:	9f 92       	push	r9
 af6:	af 92       	push	r10
 af8:	bf 92       	push	r11
 afa:	cf 92       	push	r12
 afc:	df 92       	push	r13
 afe:	ef 92       	push	r14
 b00:	ff 92       	push	r15
 b02:	cf 93       	push	r28
 b04:	df 93       	push	r29
 b06:	ec 01       	movw	r28, r24
 b08:	88 81       	ld	r24, Y
 b0a:	99 81       	ldd	r25, Y+1	; 0x01
 b0c:	aa 81       	ldd	r26, Y+2	; 0x02
 b0e:	bb 81       	ldd	r27, Y+3	; 0x03
 b10:	00 97       	sbiw	r24, 0x00	; 0
 b12:	a1 05       	cpc	r26, r1
 b14:	b1 05       	cpc	r27, r1
 b16:	21 f4       	brne	.+8      	; 0xb20 <do_rand+0x2e>
 b18:	84 e2       	ldi	r24, 0x24	; 36
 b1a:	99 ed       	ldi	r25, 0xD9	; 217
 b1c:	ab e5       	ldi	r26, 0x5B	; 91
 b1e:	b7 e0       	ldi	r27, 0x07	; 7
 b20:	bc 01       	movw	r22, r24
 b22:	cd 01       	movw	r24, r26
 b24:	2d e1       	ldi	r18, 0x1D	; 29
 b26:	33 ef       	ldi	r19, 0xF3	; 243
 b28:	41 e0       	ldi	r20, 0x01	; 1
 b2a:	50 e0       	ldi	r21, 0x00	; 0
 b2c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__divmodsi4>
 b30:	49 01       	movw	r8, r18
 b32:	5a 01       	movw	r10, r20
 b34:	27 ea       	ldi	r18, 0xA7	; 167
 b36:	31 e4       	ldi	r19, 0x41	; 65
 b38:	40 e0       	ldi	r20, 0x00	; 0
 b3a:	50 e0       	ldi	r21, 0x00	; 0
 b3c:	0e 94 de 05 	call	0xbbc	; 0xbbc <__mulsi3>
 b40:	6b 01       	movw	r12, r22
 b42:	7c 01       	movw	r14, r24
 b44:	c5 01       	movw	r24, r10
 b46:	b4 01       	movw	r22, r8
 b48:	2c ee       	ldi	r18, 0xEC	; 236
 b4a:	34 ef       	ldi	r19, 0xF4	; 244
 b4c:	4f ef       	ldi	r20, 0xFF	; 255
 b4e:	5f ef       	ldi	r21, 0xFF	; 255
 b50:	0e 94 de 05 	call	0xbbc	; 0xbbc <__mulsi3>
 b54:	dc 01       	movw	r26, r24
 b56:	cb 01       	movw	r24, r22
 b58:	c8 0e       	add	r12, r24
 b5a:	d9 1e       	adc	r13, r25
 b5c:	ea 1e       	adc	r14, r26
 b5e:	fb 1e       	adc	r15, r27
 b60:	f7 fe       	sbrs	r15, 7
 b62:	08 c0       	rjmp	.+16     	; 0xb74 <do_rand+0x82>
 b64:	8f ef       	ldi	r24, 0xFF	; 255
 b66:	9f ef       	ldi	r25, 0xFF	; 255
 b68:	af ef       	ldi	r26, 0xFF	; 255
 b6a:	bf e7       	ldi	r27, 0x7F	; 127
 b6c:	c8 0e       	add	r12, r24
 b6e:	d9 1e       	adc	r13, r25
 b70:	ea 1e       	adc	r14, r26
 b72:	fb 1e       	adc	r15, r27
 b74:	c8 82       	st	Y, r12
 b76:	d9 82       	std	Y+1, r13	; 0x01
 b78:	ea 82       	std	Y+2, r14	; 0x02
 b7a:	fb 82       	std	Y+3, r15	; 0x03
 b7c:	c6 01       	movw	r24, r12
 b7e:	9f 77       	andi	r25, 0x7F	; 127
 b80:	df 91       	pop	r29
 b82:	cf 91       	pop	r28
 b84:	ff 90       	pop	r15
 b86:	ef 90       	pop	r14
 b88:	df 90       	pop	r13
 b8a:	cf 90       	pop	r12
 b8c:	bf 90       	pop	r11
 b8e:	af 90       	pop	r10
 b90:	9f 90       	pop	r9
 b92:	8f 90       	pop	r8
 b94:	08 95       	ret

00000b96 <rand_r>:
 b96:	0e 94 79 05 	call	0xaf2	; 0xaf2 <do_rand>
 b9a:	08 95       	ret

00000b9c <rand>:
 b9c:	80 e0       	ldi	r24, 0x00	; 0
 b9e:	91 e0       	ldi	r25, 0x01	; 1
 ba0:	0e 94 79 05 	call	0xaf2	; 0xaf2 <do_rand>
 ba4:	08 95       	ret

00000ba6 <srand>:
 ba6:	a0 e0       	ldi	r26, 0x00	; 0
 ba8:	b0 e0       	ldi	r27, 0x00	; 0
 baa:	80 93 00 01 	sts	0x0100, r24
 bae:	90 93 01 01 	sts	0x0101, r25
 bb2:	a0 93 02 01 	sts	0x0102, r26
 bb6:	b0 93 03 01 	sts	0x0103, r27
 bba:	08 95       	ret

00000bbc <__mulsi3>:
 bbc:	62 9f       	mul	r22, r18
 bbe:	d0 01       	movw	r26, r0
 bc0:	73 9f       	mul	r23, r19
 bc2:	f0 01       	movw	r30, r0
 bc4:	82 9f       	mul	r24, r18
 bc6:	e0 0d       	add	r30, r0
 bc8:	f1 1d       	adc	r31, r1
 bca:	64 9f       	mul	r22, r20
 bcc:	e0 0d       	add	r30, r0
 bce:	f1 1d       	adc	r31, r1
 bd0:	92 9f       	mul	r25, r18
 bd2:	f0 0d       	add	r31, r0
 bd4:	83 9f       	mul	r24, r19
 bd6:	f0 0d       	add	r31, r0
 bd8:	74 9f       	mul	r23, r20
 bda:	f0 0d       	add	r31, r0
 bdc:	65 9f       	mul	r22, r21
 bde:	f0 0d       	add	r31, r0
 be0:	99 27       	eor	r25, r25
 be2:	72 9f       	mul	r23, r18
 be4:	b0 0d       	add	r27, r0
 be6:	e1 1d       	adc	r30, r1
 be8:	f9 1f       	adc	r31, r25
 bea:	63 9f       	mul	r22, r19
 bec:	b0 0d       	add	r27, r0
 bee:	e1 1d       	adc	r30, r1
 bf0:	f9 1f       	adc	r31, r25
 bf2:	bd 01       	movw	r22, r26
 bf4:	cf 01       	movw	r24, r30
 bf6:	11 24       	eor	r1, r1
 bf8:	08 95       	ret

00000bfa <__divmodsi4>:
 bfa:	97 fb       	bst	r25, 7
 bfc:	09 2e       	mov	r0, r25
 bfe:	05 26       	eor	r0, r21
 c00:	0e d0       	rcall	.+28     	; 0xc1e <__divmodsi4_neg1>
 c02:	57 fd       	sbrc	r21, 7
 c04:	04 d0       	rcall	.+8      	; 0xc0e <__divmodsi4_neg2>
 c06:	14 d0       	rcall	.+40     	; 0xc30 <__udivmodsi4>
 c08:	0a d0       	rcall	.+20     	; 0xc1e <__divmodsi4_neg1>
 c0a:	00 1c       	adc	r0, r0
 c0c:	38 f4       	brcc	.+14     	; 0xc1c <__divmodsi4_exit>

00000c0e <__divmodsi4_neg2>:
 c0e:	50 95       	com	r21
 c10:	40 95       	com	r20
 c12:	30 95       	com	r19
 c14:	21 95       	neg	r18
 c16:	3f 4f       	sbci	r19, 0xFF	; 255
 c18:	4f 4f       	sbci	r20, 0xFF	; 255
 c1a:	5f 4f       	sbci	r21, 0xFF	; 255

00000c1c <__divmodsi4_exit>:
 c1c:	08 95       	ret

00000c1e <__divmodsi4_neg1>:
 c1e:	f6 f7       	brtc	.-4      	; 0xc1c <__divmodsi4_exit>
 c20:	90 95       	com	r25
 c22:	80 95       	com	r24
 c24:	70 95       	com	r23
 c26:	61 95       	neg	r22
 c28:	7f 4f       	sbci	r23, 0xFF	; 255
 c2a:	8f 4f       	sbci	r24, 0xFF	; 255
 c2c:	9f 4f       	sbci	r25, 0xFF	; 255
 c2e:	08 95       	ret

00000c30 <__udivmodsi4>:
 c30:	a1 e2       	ldi	r26, 0x21	; 33
 c32:	1a 2e       	mov	r1, r26
 c34:	aa 1b       	sub	r26, r26
 c36:	bb 1b       	sub	r27, r27
 c38:	fd 01       	movw	r30, r26
 c3a:	0d c0       	rjmp	.+26     	; 0xc56 <__udivmodsi4_ep>

00000c3c <__udivmodsi4_loop>:
 c3c:	aa 1f       	adc	r26, r26
 c3e:	bb 1f       	adc	r27, r27
 c40:	ee 1f       	adc	r30, r30
 c42:	ff 1f       	adc	r31, r31
 c44:	a2 17       	cp	r26, r18
 c46:	b3 07       	cpc	r27, r19
 c48:	e4 07       	cpc	r30, r20
 c4a:	f5 07       	cpc	r31, r21
 c4c:	20 f0       	brcs	.+8      	; 0xc56 <__udivmodsi4_ep>
 c4e:	a2 1b       	sub	r26, r18
 c50:	b3 0b       	sbc	r27, r19
 c52:	e4 0b       	sbc	r30, r20
 c54:	f5 0b       	sbc	r31, r21

00000c56 <__udivmodsi4_ep>:
 c56:	66 1f       	adc	r22, r22
 c58:	77 1f       	adc	r23, r23
 c5a:	88 1f       	adc	r24, r24
 c5c:	99 1f       	adc	r25, r25
 c5e:	1a 94       	dec	r1
 c60:	69 f7       	brne	.-38     	; 0xc3c <__udivmodsi4_loop>
 c62:	60 95       	com	r22
 c64:	70 95       	com	r23
 c66:	80 95       	com	r24
 c68:	90 95       	com	r25
 c6a:	9b 01       	movw	r18, r22
 c6c:	ac 01       	movw	r20, r24
 c6e:	bd 01       	movw	r22, r26
 c70:	cf 01       	movw	r24, r30
 c72:	08 95       	ret

00000c74 <_exit>:
 c74:	f8 94       	cli

00000c76 <__stop_program>:
 c76:	ff cf       	rjmp	.-2      	; 0xc76 <__stop_program>
